// <auto-generated />
using System;
using ANIMAL.DAL.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ANIMAL.DAL.Migrations
{
    [DbContext(typeof(AnimalRescueDbContext))]
    partial class AnimalRescueDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Adopted", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdopterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AdoptionDate")
                        .HasColumnType("date");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.HasKey("Code")
                        .HasName("PK__Adopted__A25C5AA69BF7B47B");

                    b.HasIndex("AdopterId");

                    b.HasIndex("AnimalId");

                    b.ToTable("Adopted");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Adopter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("Flag")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("NumAdoptedAnimals")
                        .HasColumnType("int")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("NumReturnedAnimals")
                        .HasColumnType("int")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RegisterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Adopter");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Amphibians", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<decimal>("Humidity")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(5, 2)");

                    b.HasIndex("AnimalId");

                    b.ToTable("Amphibians");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.AnimalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<int?>("AnimalsIdAnimal")
                        .HasColumnType("int");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__AnimalRecord");

                    b.HasIndex("AnimalId");

                    b.HasIndex("AnimalsIdAnimal");

                    b.HasIndex("RecordId");

                    b.ToTable("AnimalRecord");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Animals", b =>
                {
                    b.Property<int>("IdAnimal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Adopted")
                        .HasColumnType("bit");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("HealthIssues")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("Microchipped")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("Neutered")
                        .HasColumnType("bit");

                    b.Property<string>("PersonalityDescription")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<byte[]>("Picture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .IsUnicode(false);

                    b.Property<bool>("Socialized")
                        .HasColumnType("bit");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("Subspecies")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("Trained")
                        .HasColumnType("bit");

                    b.Property<bool>("Vaccinated")
                        .HasColumnType("bit");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("IdAnimal")
                        .HasName("PK__Animals__951092F0A1868E05");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Birds", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("CageSize")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RecommendedToys")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Sociability")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("AnimalId")
                        .HasName("PK__Birds__A21A73070FA89F7C");

                    b.ToTable("Birds");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Fish", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("CompatibleSpecies")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("RecommendedItems")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("TankSize")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasIndex("AnimalId");

                    b.ToTable("Fish");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.FoundRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerOIB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId");

                    b.ToTable("FoundRecord");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Mammals", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("CoatType")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("GroomingProducts")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasIndex("AnimalId");

                    b.ToTable("Mammals");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Reptiles", b =>
                {
                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<string>("CompatibleSpecies")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("RecommendedItems")
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<string>("Sociability")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("TankSize")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.HasKey("AnimalId")
                        .HasName("PK__Reptiles__A21A7307D28BF62E");

                    b.ToTable("Reptiles");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.ReturnedAnimal", b =>
                {
                    b.Property<int>("ReturnCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdopterId")
                        .HasColumnType("int");

                    b.Property<int>("AdoptionCode")
                        .HasColumnType("int");

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<string>("ReturnReason")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.HasKey("ReturnCode")
                        .HasName("PK__Returned__4CF726C86410F49F");

                    b.HasIndex("AdopterId");

                    b.HasIndex("AdoptionCode");

                    b.HasIndex("AnimalId");

                    b.ToTable("ReturnedAnimal");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.SystemRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RecordDescription")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<string>("RecordName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int>("RecordNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__SystemRecord");

                    b.ToTable("SystemRecord");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Adopted", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Adopter", "Adopter")
                        .WithMany("Adopted")
                        .HasForeignKey("AdopterId")
                        .HasConstraintName("FK__Adopted__Adopter__4E88ABD4")
                        .IsRequired();

                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithMany("AdoptedNavigation")
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK__Adopted__AnimalI__4D94879B")
                        .IsRequired();
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Amphibians", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK__Amphibian__Anima__5CD6CB2B")
                        .IsRequired();
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.AnimalRecord", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK__AnimalRecord__Animal")
                        .IsRequired();

                    b.HasOne("ANIMAL.DAL.DataModel.Animals", null)
                        .WithMany("AnimalRecord")
                        .HasForeignKey("AnimalsIdAnimal");

                    b.HasOne("ANIMAL.DAL.DataModel.SystemRecord", "Record")
                        .WithMany()
                        .HasForeignKey("RecordId")
                        .HasConstraintName("FK__AnimalRecord__Record")
                        .IsRequired();
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Birds", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithOne("Birds")
                        .HasForeignKey("ANIMAL.DAL.DataModel.Birds", "AnimalId")
                        .HasConstraintName("FK__Birds__AnimalId__5812160E")
                        .IsRequired();
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Fish", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK__Fish__AnimalId__5EBF139D")
                        .IsRequired();
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.FoundRecord", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithMany("FoundRecord")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ANIMAL.DAL.DataModel.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Mammals", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK__Mammals__AnimalI__5535A963")
                        .IsRequired();
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.Reptiles", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithOne("Reptiles")
                        .HasForeignKey("ANIMAL.DAL.DataModel.Reptiles", "AnimalId")
                        .HasConstraintName("FK__Reptiles__Animal__5AEE82B9")
                        .IsRequired();
                });

            modelBuilder.Entity("ANIMAL.DAL.DataModel.ReturnedAnimal", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.Adopter", "Adopter")
                        .WithMany("ReturnedAnimal")
                        .HasForeignKey("AdopterId")
                        .HasConstraintName("FK__ReturnedA__Adopt__534D60F1")
                        .IsRequired();

                    b.HasOne("ANIMAL.DAL.DataModel.Adopted", "AdoptionCodeNavigation")
                        .WithMany("ReturnedAnimal")
                        .HasForeignKey("AdoptionCode")
                        .HasConstraintName("FK__ReturnedA__Adopt__5165187F")
                        .IsRequired();

                    b.HasOne("ANIMAL.DAL.DataModel.Animals", "Animal")
                        .WithMany("ReturnedAnimal")
                        .HasForeignKey("AnimalId")
                        .HasConstraintName("FK__ReturnedA__Anima__52593CB8")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ANIMAL.DAL.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ANIMAL.DAL.DataModel.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
